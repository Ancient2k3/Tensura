-- New Project [Commands_V4]
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")
local rs = game:GetService("RunService")
local ts = game:GetService("TeleportService")
local tws = game:GetService("TweenService")
local dcamera = game:GetService("Workspace").CurrentCamera
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local IsLegacyChat_Service = TextChatService.ChatVersion == Enum.ChatVersion.LegacyChatService

local strg = game:GetService("StarterGui")

local SpamChat_Enable = false
local showcommands_logs = false
local sayingcommands_status = false
local looptp_state = false
local spawnpoint_cframe = false
local isSwim_Activated = false
local Respawn_CFrame_X0 = nil

-- MessFunction [A]
function autocorrect_players(input)
    for _, player in ipairs(Players:GetPlayers()) do
        if string.lower(player.Name):sub(1, #input) == string.lower(input) or
        string.lower(player.DisplayName):sub(1, #input) == string.lower(input) then
            return player
        end
    end
    return nil
end

-- MessFunction [B]
function toClipboard(txt)
    local everyClipboard = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set)
    
    if everyClipboard then
        everyClipboard(tostring(txt))
        print("Saved message to Clipboard.")
    else
        print("Nothing to Saved to Clipboard.")
    end
end

-- MessFunction Chat str_chat [B-1]
function DisplayChat_Message(str_chat)
    str_chat = tostring(str_chat)
    if not IsLegacyChat_Service then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str_chat)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str_chat, "All")
    end
end

-- MessFunction Send Notification [B-2]
function Notify_Commands(txt_a, txt_b, duration_c)
    strg:SetCore("SendNotification", {
        Title = txt_a,
        Text = txt_b,
        Duration = duration_c,
    })
end

-- Teleport to players function mess [A-1]
function tpto(target_player)
    if target_player and target_player.Character and target_player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character:SetPrimaryPartCFrame(target_player.Character.HumanoidRootPart.CFrame)
        print("Successfully teleport to: " .. target_player.DisplayName)
    else
        print("Unsuccessfully found target player to teleport to")
    end
end

-- View/Spectating to players function mess [A-2]
function spectating(players_camera)
    if players_camera and players_camera.Character and players_camera.Character:FindFirstChild("HumanoidRootPart") then
        local dcamera = game:GetService("Workspace").CurrentCamera
        dcamera.CameraSubject = players_camera.Character.HumanoidRootPart
        dcamera.CFrame = players_camera.Character.HumanoidRootPart.CFrame
        print("Successfully spectating: " .. players_camera.DisplayName)
    else
        print("Not found Humanoid of: " .. players_camera.DisplayName)
    end
end

-- Nearest Players [N]
function find_nearestplayers()
    local nearestone = nil
    local ShortestDistance = math.huge
    
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - p.Character.HumanoidRootPart.Position).magnitude
            if distance < ShortestDistance then
                ShortestDistance = distance
                nearestone = p
            end
        end
    end
    return nearestone
end

-- Farthest Players [F]
function find_farthestplayers()
    local farthestone = nil
    local LongestDistance = 0
    
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - p.Character.HumanoidRootPart.Position).magnitude
            if distance > LongestDistance then
                LongestDistance = distance
                farthestone = p
            end
        end
    end
    return farthestone
end

-- Reset Character [R]
function resetCharacter()
    if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        humanoid.Health = 0
        player.Character:BreakJoints()
        print(player.DisplayName .. ": Character has been reset.")
    else
        print(player.DisplayName .. ": Humanoid not found in the character.")
    end
end

-- Root [R-1]
function GetRoot(char)
    local Root_Part = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
    return Root_Part
end

-- Copy Animation [C-A]
function copyAnimation(TargetSpecifics_PlayerName, self_Lp)
    local targetPlayer = Players:FindFirstChild(TargetSpecifics_PlayerName)
    if not targetPlayer or not targetPlayer.Character or not self_Lp or not self_Lp.Character then
        Notify_Commands("Error: ", "Target player or self_Lp is invalid!", 2)
        return
    end

    local targetHumanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
    local self_LpHumanoid = self_Lp.Character:FindFirstChildOfClass("Humanoid")

    if not targetHumanoid or not self_LpHumanoid then
        Notify_Commands("Error: ", "Humanoid not found for target or self_Lp!", 2)
        return
    end

    for _, track in pairs(self_LpHumanoid:GetPlayingAnimationTracks()) do
        track:Stop()
    end

    for _, track in pairs(targetHumanoid:GetPlayingAnimationTracks()) do
        if not string.find(track.Animation.AnimationId, "507768375") then
            local newAnimation = self_LpHumanoid:LoadAnimation(track.Animation)
            newAnimation:Play(0.1, 1, track.Speed)
            newAnimation.TimePosition = track.TimePosition
            
            task.spawn(function()
                track.Stopped:Wait()
                newAnimation:Stop()
                newAnimation:Destroy()
            end)
        end
    end
end

-- Combo function [1]
function tellstat_ifcombo(chat_msg_x0, title_msg_x0, text_msg_x0, duration_msg_x0)
    if sayingcommands_status then
        DisplayChat_Message(chat_msg_x0)
    else
        Notify_Commands(title_msg_x0, text_msg_x0, duration_msg_x0)
    end
end

-- Show Developer Console Logs [1]
function opendevconsole()
    if game:GetService("CoreGui"):FindFirstChild("DeveloperConsole") == nil then
        game:GetService("StarterGui"):SetCore("DevConsoleVisible", true)
    end
end

-- Loadstring function [1]
function paste(url)
    loadstring(game:HttpGet(url))()
end

-- Alliases Commands [Allies]
local Teleportation_Alliases = {"+tp", "+t", "+teleport", "+goto", "+to", "+moveto", "+gateway"}
local RandomTeleportation_Alliases = {"random", "r", "others", "any", "@r", "randomly"}
local NearbyTeleportation_Alliases = {"nearest", "n", "nearby", "closed", "@n"}
local FarthestTeleportation_Alliases = {"farthest", "f", "@f"}
local ResetCharacter_Alliases = {"+reset", "+r", "+respawn"}
local SpectatingTable = {"+view", "+spectate", "+pov"}
local UnSpectatingTable = {"+unview", "+unspectate", "+repov"}
local DEGAME_ID = {"gameid", "Gameid", "gameId", "GameId"}
local DEPLACE_ID = {"placeid", "Placeid", "placeId", "PlaceId"}
local DEJOB_ID = {"jobid", "Jobid", "jobId", "JobId"}
local DEWalkSpeed = {"+WalkSpeed", "+speed", "+Speed", "+s", "+ws", "+walkspeed"}
local DEJumpPower = {"+JumpPower", "+jump", "+Jump", "+j", "+jp", "+jumppower"}
local DECFRAME_POS = {"cframe", "CFrame", "pos", "position", "Pos", "Position", "Cordinate", "cordinate"}
local INFTP_Table = {"+looptp", "+loopgoto", "+loopt", "+loopto", "+ltp", "+lgoto", "+lto", "+lt", "+loopgateway", "+lgateway", "+autotp", "+autogoto", "+autot", "+autogateway"}
local UnINFTP_Table = {"+unlooptp", "+unloopgoto", "+unloopt", "+unloopto", "+unltp", "+unlgoto", "+unlto", "+unlt", "+unloopgateway", "+unlgateway", "+unautotp", "+unautogoto", "+unautot", "+unautogateway"}
local Swimming_Table = {"+swim", "+swimming", "+Swim", "+Swimming"}
local UnSwimming_Table = {"+unswim", "+unswimming", "+noswim", "+noswimming"}

-- Commands [Cmds]
function OnChatted_CommandScript(special)
    local DE_Command = string.split(special, " ")
    
    if table.find(Teleportation_Alliases, DE_Command[1]) then
        if #DE_Command == 2 then
            if table.find(RandomTeleportation_Alliases, DE_Command[2]) then
                local all_players = Players:GetPlayers()
                local other_players = {}
                
                for _, p in pairs(all_players) do
                    if p ~= player then
                        table.insert(other_players, p)
                    end
                end
                
                if #other_players > 0 then
                    local random_players = other_players[math.random(#other_players)]
                    print("Random Players Teleport Activated.")
                    tpto(random_players)
                else
                    print("Not found random players")
                end
            elseif table.find(NearbyTeleportation_Alliases, DE_Command[2]) then
                local nearbyuser = find_nearestplayers()
                if nearbyuser then
                    print("Nearest Players Teleport Activated.")
                    tpto(nearbyuser)
                else
                    print("Not found nearby players")
                end
            elseif table.find(FarthestTeleportation_Alliases, DE_Command[2]) then
                local farthestuser = find_farthestplayers()
                if farthestuser then
                    print("Farthest Players Teleport Activated.")
                    tpto(farthestuser)
                else
                    print("Not found farthest players")
                end
            else
                local match_players = autocorrect_players(DE_Command[2])
                
                if match_players then
                    print("Specific Players Teleport Activated.")
                    tellstat_ifcombo("Successfully Teleportation to: " .. DE_Command[2], "Teleport Status", "Successfully Teleportation to: " .. DE_Command[2], 2)
                    tpto(match_players)
                else
                    print("Not found " .. DE_Command[2] .. " players")
                end
            end
        else
            print("Invalid Teleport Command")
        end
    elseif table.find(ResetCharacter_Alliases, DE_Command[1]) then
        resetCharacter()
    elseif table.find(SpectatingTable, DE_Command[1]) and DE_Command[2] then
        local match_players = autocorrect_players(DE_Command[2])
        
        if match_players then
            print("Now Spectating: " .. DE_Command[2])
            tellstat_ifcombo("Now Spectating: " .. DE_Command[2], "Spectating Status", "Camera Spectating Set to:" .. DE_Command[2], 2)
            spectating(match_players)
        else
            print("Not found players: " .. DE_Command[2])
            tellstat_ifcombo("InCorrect Players does not existed, try again.", "Spectating Status", "Error: Not Found Players: " .. DE_Command[2], 2)
        end
    elseif table.find(UnSpectatingTable, DE_Command[1]) then
        dcamera.CameraSubject = player.Character.HumanoidRootPart
        dcamera.CFrame = player.Character.HumanoidRootPart.CFrame
        print("Reset Spectating Camera to: " .. player.DisplayName)
        tellstat_ifcombo("Successfully Reset Spectating Camera to: " .. player.DisplayName, "Spectating Status", "Camera Spectating Reset to: " .. player.Name, 2)
    elseif DE_Command[1] == "+sit" then
        player.Character.Humanoid.Sit = true
    elseif DE_Command[1] == "+leave" then
        game:Kick("Successfully Activated Script to Leave.")
    elseif DE_Command[1] == "+copy" and DE_Command[2] == "name" and DE_Command[3] then
        local Specifics_PlayerName = DE_Command[3]
        local Correct_Specifics_PlayerName = autocorrect_players(Specifics_PlayerName)
        local Username_Specifics = Correct_Specifics_PlayerName.Name
        local DisplayName_Specifics = Correct_Specifics_PlayerName.DisplayName
        
        toClipboard(Username_Specifics)
        task.wait(0.001)
        toClipboard(DisplayName_Specifics)
        task.wait(0.001)
        if sayingcommands_status then
            DisplayChat_Message("۝ " .. Correct_Specifics_PlayerName.Name .. ": Username Copied In「1s」and...")
            task.wait(0.001)
            DisplayChat_Message("۝ " .. Correct_Specifics_PlayerName.DisplayName .. ": Name Copied In「1s」.")
        else
            print("Successfully Copied Username: " .. Correct_Specifics_PlayerName.Name)
            task.wait(0.001)
            print("And Display Name: " .. Correct_Specifics_PlayerName.DisplayName)
        end
    elseif DE_Command[1] == "+copy" then
        if #DE_Command == 2 then
            if table.find(DEGAME_ID, DE_Command[2]) then
                local CurrentGame_Id = game.GameId
                toClipboard(CurrentGame_Id)
                task.wait(0.5)
                if sayingcommands_status then
                    DisplayChat_Message("Current Game-Id is: " .. CurrentGame_Id)
                else
                    print("Current Game-Id is: " .. CurrentGame_Id)
                end
            elseif table.find(DEPLACE_ID, DE_Command[2]) then
                local CurrentPlace_Id = game.PlaceId
                toClipboard(CurrentPlace_Id)
                task.wait(0.5)
                if sayingcommands_status then
                    DisplayChat_Message("Current Place-Id is: " .. CurrentPlace_Id)
                else
                    print("Current Place-Id is: " .. CurrentPlace_Id)
                end
            elseif table.find(DEJOB_ID, DE_Command[2]) then
                local CurrentJob_Id = game.JobId
                toClipboard(CurrentJob_Id)
                task.wait(0.5)
                if sayingcommands_status then
                    DisplayChat_Message("Current Job-Id is: " .. CurrentJob_Id)
                else
                    print("Current Job-Id is: " .. CurrentJob_Id)
                end
            elseif table.find(DECFRAME_POS, DE_Command[2]) then
                local CurrentLP_CFrame = player.Character.HumanoidRootPart.CFrame
                toClipboard(CurrentLP_CFrame)
                task.wait(0.5)
                if sayingcommands_status then
                    DisplayChat_Message("Current LocalPlayer-CFrame is: " .. CurrentLP_CFrame)
                else
                    print("Current LocalPlayer-CFrame is: " .. CurrentLP_CFrame)
                end
            else
                print("Unknown Table: " .. DE_Command[2])
            end
        end
    elseif table.find(DEWalkSpeed, DE_Command[1]) and DE_Command[2] then
        local CurrentLP_WalkSpeed = DE_Command[2]
        player.Character.Humanoid.WalkSpeed = CurrentLP_WalkSpeed
        print("Currently WalkSpeed Changed to: " .. DE_Command[2])
        strg:SetCore("SendNotification", {
            Title = "Walk Speed Status",
            Text = "Currently use " .. DE_Command[1] .. " to changed walking speed to: " .. DE_Command[2],
            Duration = 2,
        })
    elseif table.find(DEJumpPower, DE_Command[1]) and DE_Command[2] then
        local CurrentLP_JumpPower = DE_Command[2]
        player.Character.Humanoid.JumpPower = CurrentLP_JumpPower
        print("Currently JumpPower Changed to: " .. DE_Command[2])
        strg:SetCore("SendNotification", {
            Title = "Jump Power Status",
            Text = "Currently use " .. DE_Command[1] .. " to changed jumping power to: " .. DE_Command[2],
            Duration = 2,
        })
    elseif DE_Command[1] == "+say" and DE_Command[2] then
        local DE_SendMessage_X0 = DE_Command[2]
        DisplayChat_Message(DE_SendMessage_X0)
    elseif DE_Command[1] == "+spam" and DE_Command[2] then
        local DE_SendMessage_X1 = DE_Command[2]
        SpamChat_Enable = true
        rs.RenderStepped:Connect(function(deltaTime)
            if SpamChat_Enable then
                wait(1.5)
                DisplayChat_Message(DE_SendMessage_X1)
            end
        end)
    elseif DE_Command[1] == "+unspam" or DE_Command[1] == "+nospam" then
        SpamChat_Enable = false
        DE_SendMessage_X1 = nil
    elseif DE_Command[1] == "+clogs" and DE_Command[2] then
        local clogs_state = DE_Command[2]
        showcommands_logs = clogs_state
        Notify_Commands("clogs set", "clogs: " .. DE_Command[2], 2)
    elseif DE_Command[1] == "+noclogs" or DE_Command[1] == "+unclogs" then
        showcommands_logs = false
        Notify_Commands("force clogs set", "clogs now set false", 2)
    elseif DE_Command[1] == "+tellstat" and DE_Command[2] then
        local tellstat_state = DE_Command[2]
        sayingcommands_status = tellstat_state
        Notify_Commands("tellstat set", "tellstat: " .. DE_Command[2], 2)
    elseif DE_Command[1] == "+untellstat" or DE_Command[1] == "+notellstat" then
        sayingcommands_status = false
        Notify_Commands("force tellstat set", "tellstat now set false", 2)
    elseif table.find(UnINFTP_Table, DE_Command[1]) then
        looptp_state = false
    elseif table.find(INFTP_Table, DE_Command[1]) then
        if #DE_Command == 2 then
            if DE_Command[2] then
                local matchedplayers_looptp = DE_Command[2]
                local looptp_players = autocorrect_players(matchedplayers_looptp)
                looptp_state = true
                
                if looptp_players then
                    rs.RenderStepped:Connect(function(deltaTime)
                        if looptp_state then
                            tpto(looptp_players)
                        else
                            looptp_players = nil
                        end
                    end)
                else
                    Notify_Commands("Error", "IDK What Should I Writed Here... Bye", 2)
                end
            end
        end
    elseif DE_Command[1] == "+spawnpoint" then
        Respawn_CFrame_X0 = GetRoot(player.Character).CFrame
        spawnpoint_cframe = true
        Notify_Commands("Spawnpoint Set", "Cordinate: " .. Respawn_CFrame_X0)
    elseif DE_Command[1] == "+copy" and DE_Command[2] == "animation" and DE_Command[3] then
        local SpecificPlayers_Animation = DE_Command[3]
        local CorrectSpecificPlayerName_Animation = autocorrect_players(SpecificPlayers_Animation)
        
        if CorrectSpecificPlayerName_Animation then
            copyAnimation(CorrectSpecificPlayerName_Animation, player)
        else
            if sayingcommands_status then
                DisplayChat_Message("Can't do that")
            else
                Notify_Commands("Copy Animation", "Can't Copied Animation from player: " .. CorrectSpecificPlayerName_Animation.DisplayName, 2)
            end
        end
    elseif table.find(Swimming_Table, DE_Command[1]) and DE_Command[2] then
        if not isSwim_Activated then
            local SwimSpeed_Set = DE_Command[2]
            isSwim_Activated = true
            paste("https://raw.githubusercontent.com/NganHa2k3/Tensura/refs/heads/ciel/Swimming_X")
            _G.oldgrav = Workspace.Gravity
            _G.Swimming_X(true, SwimSpeed_Set)
            if sayingcommands_status then
                DisplayChat_Message("Air Swimming Enable, Speed: " .. DE_Command[2])
            else
                Notify_Commands("Swimming Status", "Swimming set true and swim speed is: " .. DE_Command[2])
            end
        else
            tellstat_ifcombo("Air Swimming Is already enable, can't activated twice (it's twice = two 'fix if i'm wrong, thanks you')", "Swimming Status", "Swimming Is already Enable, can't do it again...", 2)
        end
    elseif table.find(UnSwimming_Table, DE_Command[1]) then
        if isSwim_Activated then
            isSwim_Activated = false
            _G.Swimming_X(false, 29)
            if sayingcommands_status then
                DisplayChat_Message("Air Swimming Disable, Speed: Set Default")
            else
                Notify_Commands("Swimming Status", "Swimming set false and swim speed is return default")
            end
        else
            tellstat_ifcombo("Air Swimming Is not Enable right now.", "Swimming Status", "Swimming is not Enable right now so...", 2)
        end
    elseif DE_Command[1] == "+emotebox" then
        paste("https://raw.githubusercontent.com/NganHa2k3/Tensura/script/AnimationEmote_Box")
        tellstat_ifcombo("Completed Loaded In: Emote Script", "NganHa2k3 Emote Box Script", "Emote / Emoji / Animation Fast", 2)
    elseif DE_Command[1] == "+noemotebox" or DE_Command[1] == "+unemotebox" then
        local ScreenGui_Name = "NganHa2k3_EmoteBox"
        
        for _, SG in ipairs(game:GetService("CoreGui"):GetChildren()) do
            if SG:IsA("ScreenGui") and SG.Name == ScreenGui_Name then
                pcall(function()
                    SG:Destroy()
                end)
            end
        end
        tellstat_ifcombo("Completed Removed: Emote Script", "Emote Box Removed", "Successfully removed emote box script", 2)
    elseif DE_Command[1] == "+executor" then
        paste("https://raw.githubusercontent.com/NganHa2k3/RobloxScript_0/main/Executor_V2")
        tellstat_ifcombo("Loaded Custom Executor", "Execute Script/Editing/Loop Execute", "Paste Inside A Script", 2)
    elseif DE_Command[1] == "+cmds" then
        print("All Commands: ")
        print("[+tp/+t/+teleport/+goto/+to/+moveto/+gateway: random/r/others/any/@r/randomly, nearest/n/nearby/closed/@n, farthest/f/@f, players name]")
        print("[+respawn/+reset/+r]")
        print("[+pov/+view/+spectate/+repov/+unview/+unspectate: players name]")
        print("[+copy: gameId, GameId, gameid, Gameid, PlaceId, placeId, Placeid, placeid, jobid, Jobid, JobId, jobId, players name, cframe, CFrame, pos, position, Position, Cordinate, cordinate]")
        print("[+WalkSpeed/+Speed/+speed/+s/+ws/+walkspeed: value]")
        print("[+JumpPower/+Jump/+jump/+j/+jp/+jumppower: value]")
        print("[+looptp/+loopt/+loopgoto/+loopto/+ltp/+lgoto/+lto/+lgateway/+loopgateway/+autotp/+autogoto/+autot/+autogateway: players name 'Added un to disable, example +unltp']")
        print("[+Swim/+swim/+swimming/+Swimming: Value]")
        print("[+sit/+leave/+say/+spam/+unspam/+clogs/+noclogs/+tellstat/+untellstat/+spawnpoint/+emotebox/+noemotebox/+executor]")
        opendevconsole()
    else
        print("Unknown Command: " .. DE_Command[1])
        if showcommands_logs then
            DisplayChat_Message("Unknown Command Used: " .. DE_Command[1])
        end
    end
end

player.Chatted:Connect(OnChatted_CommandScript)

player.CharacterAdded:Connect(function()
    if spawnpoint_cframe then
        wait(1)
        GetRoot(player.Character).CFrame = CFrame.new(Respawn_CFrame_X0)
    end
end)

strg:SetCore("SendNotification", {
    Title = "Commands + Script NganHa2k3-[Version: 4]",
    Text = "type +cmds to preview all commands existing.",
    Duration = 5,
})
